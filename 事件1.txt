1、如何绑定事件处理函数
	1、ele.onxxx = function (){}
		*兼容性很好，但是一个元素的同一个事件上只能绑定一个处理函数
		*基本等同于写在HTML行间上
		eg:div.onclick = function (){}点击事件
	2、obj.addEventListener(type, fun, false)（事件类型，处理函数，false）
		*IE9以下不兼容，可以为一个事件绑定多个处理程序
		*eg:div.addEventListener('click', text, false)；
		function text() {}；
	3、obj.attachEvent('on'+type, fun)
		*IE独有，一样可以给一个事件绑定多个处理程序
	4、已封装addEvent（）

2、事件处理程序的运行环境
	1、ele.onxxx = function (){}
		*程序this指向是dom元素本身
	2、obj.addEventListener(type, fun, false)
		*程序this指向是don本身
	3、obj.attachEvent('on'+type, fun)
		*程序this指向window

3、解除事件绑定函数
	1、ele.onclick = false/null
	2、ele.removeEventListener(type, fn, false)
	3、ele.detachEvent('on' + type, fn);
	4、注：若绑定匿名函数，贼无法解除

4、事件处理模型--事件冒泡、捕获
	1、事件冒泡：
		结构上（非视觉上）嵌套关系的元素，会存在事件冒泡的功能，即同一事件，自子元素冒泡向父元素。（自底向上）
	2、事件捕获：
		结构上（非视觉上）嵌套关系的元素，会存在事件捕获的功能，即同一事件，自父元素捕获至子元素（事件源元素）。（自顶向下）
		IE没有捕获事件
		自我理解：父子都有这事件。点击子级，父级先获得这个信息，实现事件，然后再将这信息传给子级，然后子级实现事件
		*另一种捕获。ele.setCapture()把整个页面的事件都弄到自己身上。ele.releaseCapture();取消这种捕获
	3、触发顺序，先捕获后冒泡。捕获和冒泡只能同时存在一个，将obj.addEventListener(type, fun, false)的false改为true即触发捕获
	4、focus（聚焦事件）, blur, change, submit, reset, select等事件不冒泡

5、取消冒泡和组织默认事件
	1、取消冒泡：
		W3C标准event.stopPropagation();不支持ie9以下版本
		IE独有event.cancelBubble = true;
window.event? window.event.cancelBubble = true : e.stopPropagation();

	2、阻止默认事件：
		1、默认事件--表单提交，a标签跳转，右键菜单等
		2、return false; 以对象属性的方式注册的事件才生效
		3、event.preventDefault();W3C标准,IE9以下不兼容
		4、event.returnValue = false;兼容IE


* JQ方法中，用return false均可取消冒泡和默认事件

6、事件对象---》事件委托
	1、使用前兼容，var event = e || window.event
	2、事件源对象（返回具体鼠标点的元素的所有信息，不受冒泡捕获的影响）
		event.target  火狐只有这个
		event.srcElement   IE只有这个
		这俩chrome都有
	3、兼容性写法
		var target = event.target || event.srcElement

7、事件委托
	1、利用事件冒泡，和事件源对象进行处理
		优点：
			1、性能 不需要循环所有元素一个个绑定事件
			2、灵活 当有新的子元素时不需要重新绑定事件




